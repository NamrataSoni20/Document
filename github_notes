[configuring git]
$ git config --global user.name "Your Name"
$ git config --global user.email "you@example.com"

[to create a repo:]
$ git init

[adding new origin(remote link setup):]

$ git remote add origin https://_parth_modi@bitbucket.org/ror_solute/first_demo.git
$ git remote add origin_github https://github.com/ror_solute/first_demo.git

//////where origin and origin_github are name of remote repository links
//////and first_demo is name of repository and first_demo.git is git file of the same repository.
[show which origins(remote repo links are available)]
$ git remote -v

[removing a particular remote repository links]
$ git remote rm origin

[checking status of repo, showing files that are changed after last commit]
$ git status

[adding changed files]
$ git add -A    ////to add all files that are changed
$ git add {file-name}   ////to add a particular file that changed


[committing changes]
$ git commit -m "message"
see more on following link:
https://git-scm.com/docs/git-commit


[pushing changes to repo]

here, origin and origin_github are name of remote repository links.
and master is branch name to which changes are commited.
you can use other branch names if they exist.


$ git push -u origin master
$ git push -u origin_github master

/////////////////////////////////////////////////////////////////////////////////////////
about collaborations in github
refer to following link for more details
https://www.atlassian.com/git/tutorials/syncing


[first, clone repo in your pc to desired folder. ]
[This is two step process.
1.fetch content and
2. merge that content with the branch you are working on]


1.[fetch content]
$ git fetch <remote>
$ git fetch <remote> <branch>

[getting details of branches]
$ git branch -r   //shows the branches you might see after fetching from the origin remote

$ git branch <branch>


2.[merge that content with the branch you are working on]

$ git merge origin/master




///////////////////////////////////////////////////////////////////////////////////////////
git pull - does the above process of fetching and merging into single step

$ git pull <remote>

Fetch the specified remoteâ€™s copy of the current branch and immediately merge it into the local copy. 
This is the same as 
$ git fetch <remote> followed by 
$ git merge origin/<current-branch>.


$ git pull --rebase <remote>
Same as the above command, but instead of using git merge to integrate the remote branch with the local one, use git rebase.

\\\\\\\\\\\\\\\what is difference between rebase and simple pull??////////////////////////






